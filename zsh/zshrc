# Path to your oh-my-zsh installation.
# export ZSH=/home/gcg/.oh-my-zsh

source /usr/share/zsh/share/antigen.zsh
antigen use oh-my-zsh
# Dependencies from https://github.com/ohmyzsh/ohmyzsh
antigen bundle jump
antigen bundle heroku
antigen bundle tldr
antigen bundle command-not-found
# Dependencies from other GitHub repos
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle jeffreytse/zsh-vi-mode

# Theme
antigen theme romkatv/powerlevel10k
export POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(status vcs dir) # context
export POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=() # Right prompt not working (because "vim-mode" on zsh?)
export POWERLEVEL9K_PROMPT_ON_NEWLINE=false
# export POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=""
# export POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=""
antigen apply

HIST_STAMPS="yyyy-mm-dd"

# infinite .zsh_history
export HISTSIZE=1000000000
export SAVEHIST=$HISTSIZE
setopt EXTENDED_HISTORY

export PATH="/home/gcg/.gem/ruby/2.3.0/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl"
export PATH="$PATH:./node_modules/.bin:../node_modules/.bin:../../node_modules/.bin:../../../node_modules/.bin:../../../../node_modules/.bin"
# golang
export PATH="$PATH:/home/gcg/go/bin"
# pip
export PATH="$PATH:/home/gcg/.local/bin"
# parasite (proxy to record and replay requests)
export PATH="$PATH:/home/gcg/dotfiles/manjaro/parasite"

# this slows down startup because nodejs
# export PATH="$PATH:$(yarn global bin 2>/dev/null)"
# so use this instead
export PATH="$PATH:$HOME/.config/yarn/global/node_modules/.bin"

# export MANPATH="/usr/local/man:$MANPATH"

debug() {
  zsh -xv -i -c "print -n" 2>&1 | ts -i "%.s" > zsh_startup.log
  n zsh_startup.log
  rm zsh_startup.log
}

# You may need to manually set your language environment
# export LANG=en_US.UTF-8
#
alias vincenza='ssh -o PubKeyAuthentication=no -p 2222 vincenza@maisonvincenza.com.br'
export VISUAL=nvim
export EDITOR="$VISUAL"
alias webcam='guvcview'

# Git
alias g='git'
function ga() {
  git add "$*" && git status
}
alias gp='git push'
alias gpf='git push --force-with-lease'
alias gcm='git commit --gpg-sign -m'
alias gc='git commit --gpg-sign -v'
alias gcam='git commit --gpg-sign -a -m'
alias gst='git status'
alias griom='git fetch origin &&git rebase -i origin/master || git rebase -i origin/main'
alias grom='git fetch origin && git rebase origin/master || git rebase origin/main'
alias griod='git fetch &&git rebase -i origin/develop'
alias gd='git diff --minimal'
alias gdc='git diff --cached'
alias master='git co master&&g rcb'
# git interactive add
alias gia="git status -s | sed s/^...// | ipt -m -M 'Select files to add:' | xargs git add"
# git interactive show
alias gis="git stash list | ipt -M 'Select stashed item to show:' --unquoted | cut -d ':' -f 1 | xargs git stash show -u"
# git delete merged branches
alias gdmb="git branch --merged | grep -Ev '(^\*|master)' | xargs git branch -d"
gitinv() {
  cd ~/inv/repos/
  if [ ! -d "$1" ]; then
    git clone git@github.com:invisible-tech/$1.git
  fi
  cd $1
}
# alias gh="chromium \`git remote -v | grep fetch | head -1 | cut -f2 | cut -d' ' -f1 | sed -e's/git@/http:\/\//' -e's/\.git$//' | sed -E 's/(\/\/[^:]*):/\1\//'\`"
alias pr='hub pull-request'
alias n='nvim'
alias nn='f -e nvim'
alias nd='node -r ~/dotfiles/node'
alias nt='nvim /tmp/$RANDOM'
alias ntsx='nvim /tmp/$RANDOM.tsx'
na () { n "+/\c$*" `ag --ignore yarn.lock --ignore-dir node_modules --ignore-dir .next -l "$*"` }
nag () { n "+/\c$*" `ag --ignore yarn.lock --ignore-dir node_modules --ignore-dir .next -l "$*"` }
nf () { n `find -name "$*" -not -path "./node_modules/*"` }
nlint() { n `eslint --cache -f ~/code/_archive/eslint-formatter-list .` }
alias ff='ag -g'
alias w='watch -n 0.5 --color'
alias v='viewnior'
alias c='xclip -selection clipboard'
alias diff='colordiff'
alias diffgh='diff -u'
alias wr='nmcli r w off&&nmcli r w on'
alias won='nmcli r w on'
alias woff='nmcli r w off'
alias wr='nmcli r w off&&nmcli r w on'
alias ww='watch nmcli d w'
alias y='yarn'
alias yd='yarn dev'
alias yy='yarn --ignore-scripts'
alias yya='yarn --ignore-scripts add'
alias ya='yarn add'
alias yd='yarn dev'
alias ys='yarn start'
alias t='docker start pg;yarn test:all;docker stop pg'
alias cat='bat'
m() {
  # mocha default path is test/mocha.opts
  file=$(readlink -f $1)
  [ -f "test/mocha.opts" ] && (mocha $file)
  [ -f "../../mocha.opts" ] && (cd ../../../ && mocha $file)
  [ -f "../../../mocha.opts" ] && (cd ../../../../ && mocha $file)
  [ -f "../../../../mocha.opts" ] && (cd ../../../../../ && mocha $file)
  [ -f "../../../../../mocha.opts" ] && (cd ../../../../../../ && mocha $file)
  [ -f "../../../../../../mocha.opts" ] && (cd ../../../../../../../ && mocha $file)
}
alias tw='TS_NODE_FILES=true ts-mocha --watch'
alias zshrc='nvim ~/.zshrc&&reload'
alias gitconfig='nvim ~/.gitconfig'
alias aa='ag --ignore yarn.lock --ignore node_modules --ignore package-lock.json --context=3'
nrc() {
  cd ~/dotfiles/
  n awesome/rc.lua
  cd -
  # echo 'awesome.restart()' | awesome-client
}
re() {
  rec -t wav - | lame -V 9 -h - >rec.mp3
  # rec -t wav - | lame -V 9 -h - >/tmp/record.mp3
}
mkd() { mkdir -p $1 && cd $1 }
tmp() {
  cd /tmp
  mkd $RANDOM
  npm init --yes
  clear
}
tmpclone() {
  cd /tmp
  mkd $RANDOM
  git clone --depth 1 $* .
}
alias clonetmp='tmpclone'
cc() { readlink -f $1 | c }
alias lint='nvim `eslint --cache -f ~/code/_archive/eslint-formatter-list --ignore-path .gitignore .`'
perf() {
  sudo pstate-frequency --set --plan performance >/dev/null
  # if pstate-frequency --get|grep performance; then
  #   echo "already high"
}
powersave() {
  xbacklight -set 7
  sudo pstate-frequency --set --plan powersave
}
alias hibernate='sudo echo "ok" && xlock 2>/dev/null & echo disk | sudo tee /sys/power/state'
alias suspend='sudo echo "ok" && xlock 2>/dev/null & echo mem | sudo tee /sys/power/state'
alias wf='chromium --app="https://workflowy.com" --enable-apps --enable-extension-apps'
alias mic-test='arecord -vvv -f dat /dev/null'
alias p='pulumi'
# p() {
#   while true
#   do
#     timeout --preserve-status 0.2 ping 8.8.8.8 -c 1|head -n 2|tail -n 1
#   done
# }
# pacman
pi() {
  sudo pacman -Syy $* && echo "sudo pacman -Syy $*">>~/dotfiles/manjaro/install.sh
}
pacs() {
  pacman -Ss $* | less
}
# yay
yi() { yay -Syy --noconfirm $* && echo "yay --Syy $*">>~/dotfiles/manjaro/install.sh }
yars() {
  yay --sortby popularity -Ss $* | less
}

alias curlpost='curl -X POST -H "Content-Type: application/json" -d @-'
gif() { ffmpeg -i $1 $1.gif }
gifhq() {
  palette="/tmp/palette.png"
  filters="fps=15,scale=420:-1:flags=lanczos"
  ffmpeg -v warning -i $1 -vf "$filters,palettegen" -y $palette
  ffmpeg -v warning -i $1 -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y $1.hq.gif
}

speedup() { ffmpeg -i $1 -filter_complex "[0:v]setpts=0.8*PTS[v]" -map "[v]" fast-$1 }
speedupx() {
  if [ $# -eq 0 ]
  then
    echo "Usage: speedupx <speed=0.8> <input>"
    return
  fi
  ffmpeg -i $2 -filter_complex "[0:v]setpts=$1*PTS[v]" -map "[v]" fast-$2
}
speedupa() { ffmpeg -i $1 -filter_complex "[0:v]setpts=0.8*PTS[v];[0:a]atempo=1.25[a]" -map "[v]" -map "[a]" fast-$1 }
reload() { source ~/.zshrc }

# heroku aliases
alias hl='heroku logs --remote production|less'
alias hls='heroku logs --remote staging|less'
alias hlt='heroku logs --tail --remote production'
alias hlts='heroku logs --tail --remote staging'
alias hlst='heroku logs --tail --remote staging'
alias hrel='heroku releases --remote production'
alias h='heroku'
alias sta='git push -f staging HEAD:master'

export TERM=screen-256color-bce

eval $(dircolors ~/.dircolors)

# imagemagik aliases
shadow() {
  # http://www.imagemagick.org/script/command-line-options.php?#shadow
  convert $1 \( -clone 0 -background black -shadow 60x4+0+0 \) -reverse -background none -layers merge +repage $2
}
orb() {
  MASK=/tmp/mask$RANDOM.png
  INPUT=$1
  OUT=$2
  W=400
  H=400
  SIZE=$W\x$H

  let "CX = $W / 2"
  let "CY = $H / 2"
  RESIZED=/tmp/resized$RANDOM.png

  # Create the round mask 
  convert -size $SIZE xc:black -fill white -draw "circle $CX,$CY $CX,0" $MASK

  # Resize original image
  convert $INPUT -resize $SIZE $RESIZED

  # cut the mask shape out of the image 
  convert $RESIZED $MASK -alpha Off -compose CopyOpacity -composite $OUT
  # composite -compose dst-out $MASK $INPUT -matte $OUT

  rm $MASK
  rm $RESIZED
}
loopgif() {
  convert -delay 20 -loop 0 $*
}
mergepdf() {
  gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=$1 $2 $3 $4 $5
}

# costly call
eval "$(keychain --eval --quiet id_rsa)"

if [[ $TERM == xterm-termite ]]; then
  . /etc/profile.d/vte.sh
  __vte_osc7
fi

export KEYTIMEOUT=1

# Key bindings -- {{{
function append_exit() {
  BUFFER="$BUFFER && beep && exit"
}
function append_nohup {
  BUFFER="nohup "$BUFFER" </dev/null >myprogram.log 2>&1 &! exit"
}
function call_ls {
  zle accept-line
  echo ""
  exa --long # ls
}
function call_gst {
  zle accept-line
  echo ""
  gst
}
function call_gd {
  zle accept-line
  echo ""
  gd
}
function zvm_after_lazy_keybindings() {
  zvm_define_widget append_exit
  zvm_bindkey viins '^S' append_exit

  zvm_define_widget append_nohup
  zvm_bindkey viins '^A' append_nohup

  zvm_define_widget call_ls
  zvm_bindkey viins '^[l' call_ls

  zvm_define_widget call_gst
  zvm_bindkey viins '^[s' call_gst

  zvm_define_widget call_gd
  zvm_bindkey viins '^[d' call_gd
}

# Key bindings -- }}}

# fasd ---------------
#
# commented out because nvim does not have viminfo file
# https://github.com/neovim/neovim/issues/999
# export _FASD_BACKENDS="current viminfo"
# export _FASD_VIMINFO=""
#
# costly call
eval "$(fasd --init posix-alias zsh-hook zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install)"
bindkey "^X^X" fasd-complete    # C-x C-a to do fasd-complete (files and directories)
bindkey "^X^F" fasd-complete-f  # C-x C-f to do fasd-complete-f (only files)
bindkey "^X^D" fasd-complete-d  # C-x C-d to do fasd-complete-d (only directories)

# nvm (node version manager)
# Defer initialization of nvm until nvm, node or a node-dependent command is
# run. Ensure this block is only run once if .bashrc gets sourced multiple times
# by checking whether __init_nvm is a function.
if [ -s "/usr/share/nvm/init-nvm.sh" ] && [ ! "$(whence -w __init_nvm)" = function ]; then
  # export NVM_DIR="$HOME/.nvm"
  # [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
  declare -a __node_commands=('nvm' 'node' 'npm' 'yarn' 'gulp' 'grunt' 'webpack')
  function __init_nvm() {
    for i in "${__node_commands[@]}"; do unalias $i; done
    source /usr/share/nvm/init-nvm.sh
    unset __node_commands
    unset -f __init_nvm
  }
  for i in "${__node_commands[@]}"; do alias $i='__init_nvm && '$i; done
fi

# power settings
# "upower -e" to find out your devices
# alias batt='upower -i /org/freedesktop/UPower/devices/battery_BAT0|grep -E "state|time\ to\ full|time\ to\ empty|percentage"'
alias batt='sudo tlp-stat -b'
alias fullcharge='sudo tlp fullcharge'

# start x if first tty1
if [[ ! ${DISPLAY} && ${XDG_VTNR} == 1 ]]; then
  # mute microphone on startup
  amixer set Capture nocap
  exec ssh-agent startx 
fi

# not working
webcamrecord() {
  vlc v4l2:// :input-slave=alsa:// :v4l-vdev="/dev/video0" :v4l-norm=3 :v4l-frequency=-1 :v4l-caching=300 :v4l-chroma="" :v4l-fps=-1.000000 :v4l-samplerate=44100 :v4l-channel=0 :v4l-tuner=-1 :v4l-audio=-1 :v4l-stereo :v4l-width=480 :v4l-height=360 :v4l-brightness=-1 :v4l-colour=-1 :v4l-hue=-1 :v4l-contrast=-1 :no-v4l-mjpeg :v4l-decimation=1 :v4l-quality=100 --sout="#transcode{vcodec=theo,vb=2000,fps=12,scale=0.67,acodec=vorb,ab=90,channels=1,samplerate=44100}:standard{access=file,mux=ogg,dst=output.ogg}"
}
alias ss='systemctl status'
alias sdr='sudo systemctl daemon-reload'
alias sstart='sudo systemctl start'
alias blue='bluetoothctl'
function jbl {
  blue power on
  blue connect 04:FE:A1:B3:FF:47 
}
function ed { # Edifier
  blue power on
  while (! blue connect 04:FE:A1:E8:D9:20)
  do
    sleep 0.1
  done
}
function redmi { # Redmi earplug
  blue power on
  while (! blue connect 1C:52:16:76:54:DA)
  do
    sleep 0.1
  done
  # while (! blue connect 1C:52:16:76:59:78)
  # do
  #   sleep 0.1
  # done
}
function btoff { # Edifier
  blue disconnect 04:FE:A1:B3:FF:47 
  blue disconnect 04:FE:A1:E8:D9:20
}
alias blueswitch='~/dotfiles/scripts/blueswitch.sh'


alias keys='xmodmap -pke|less'
# alias np='n -c :Denite\ -start-filter\ -no-split\ -buffer-name=files\ -ignorecase\ file/rec'
alias np='echo "This alias was making Denite run at all times with 100% CPU"'

alias dotf='cd ~/dotfiles'
function dox() {
  cd ~/Downloads
  teensy-loader-cli -v -w -mmcu=atmega32u4 $(ls -t1 *.hex|head -1)
}



# TODO
# Markdown utilities (requires `brew install pandoc`)
# https://gist.githubusercontent.com/sportebois/605c81ee3acfa55c1aa047f053a2018e/raw/9a532a258f019170d8a4a749f15ef8aed8f6aefa/markdown_in_shell.sh
function mdless () {
  local mdfile=$1
  if [ -z ${mdfile:+x} ]; then mdfile="README.md"; fi
  case $mdfile in
      -h | --help)
        print "mdless usage: 'mdless myfile.md' or 'mdless' (defaults to README.md)"
      ;;
      *)
        mdcat $mdfile | less
      ;;
  esac
}
 
function mdcat () {
  local mdfile=$1
  if [ -z ${mdfile:+x} ]; then mdfile="README.md"; fi
  pandoc -s -f markdown -t man $mdfile | groff -T utf8 -man
}


# For boot / clojure
# export BOOT_JVM_OPTIONS="--add-modules=java.xml.bind"
export BOOT_JVM_OPTIONS="--add-opens=java.base/java.net=ALL-UNNAMED"

alias hdmi="xrandr --output HDMI1 --mode 800x600&&xrandr --output HDMI1 --mode 1920x1080"
alias fixdns="echo \"nameserver 8.8.8.8\"|sudo tee /etc/resolv.conf"
alias did="nvim -c 'normal Go' -c 'r!date' ~/did.txt"
alias bandwidth="sudo iftop -i wlp4s0"
function sleep_until {
  seconds=$(( $(date -d "$*" +%s) - $(date +%s) )) # Use $* to eliminate need for quotes
  if [ $seconds -lt 0 ] ; then ((seconds+=24*60*60)) ; fi
  echo "Sleeping until $*"
  echo "Sleeping for $seconds seconds"
  sleep $seconds
}
alias csv='column -s, -t | less -#2 -N -S'

function goodnight() {
  powersave
  chromium http://homepages.neiu.edu/~mtailor/cs300/images/bluecolor.jpg
  xset s off
  echo "---"
  echo "--- Don't forget to move your mouse to the bottom right edge of the screen to disable the lock"
  echo "---"
  date
  sleep_until 06:30
  xbacklight -set 100%
  echo "--- Remember to do xset s"
}

alias win="/home/gcg/win/run.sh"
alias mac="(cd /home/gcg/mac/ ; ./OpenCore-Boot.sh)"
alias tv="rm -f ~/.config/minidlna/cache/files.db&&minidlnad -dR"
alias serve="ifconfig | grep -A1 wlp4s0|grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n 1 && python3 -m http.server"
alias servelive="browser-sync start -s -f . --no-notify --host 0.0.0.0 --port 9000&&chromium http://0.0.0.0:9000"
alias compose="less /usr/share/X11/locale/en_US.UTF-8/Compose"
alias us="setxkbmap us"
alias de="setxkbmap de"
alias shot="flameshot gui"
alias up="TERM=xterm up"
alias parcelify="parcel build --target=node --bundle-node-modules"

# IBus for ibus-uniemoji
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus

# Postgres
alias pg="psql -h localhost -p 5432 -U postgres "

# gpg
alias aes256="gpg --symmetric --cipher-algo aes256"
alias enc="gpg --symmetric --cipher-algo aes256 | base64 --wrap=0"
alias dec="base64 -d | gpg -d"

alias mon="nodemon -e 'js jsx ts tsx sh json clj'"

function sql {
  # Usage: sql <heroku app name>
  pgcli $(heroku config --app $1 | grep -E "^DATABASE_URL:" | cut -d':' -f2-)
}
function sql2 {
  # Usage: sql <heroku app name>
  psql $(heroku config --app $1 | grep -E "^DATABASE_URL:" | cut -d':' -f2-) "${@:2}"
}

alias dockerprune='docker system prune -a --volumes'
alias yt='mpsyt'
# alias ls='exa'

# very fuzzy tab completion of filenames
# https://stackoverflow.com/a/25556544
# Need both of these, in this order (I think?)
zstyle ':completion:*' matcher-list 'r:[[:ascii:]]||[[:ascii:]]=** r:|=* m:{a-z\-}={A-Z\_}'
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # match upper from lower case

alias delta="nmcli c up Delta"
alias 4g="nmcli c up \"HP Deskjet 2541\""
alias wifi="nmcli c up \"HP Deskjet 2540\""

alias updates='sudo pamac-manager updates'
function gnew {
  git fetch && g checkout origin/master && g co -b $1
}
alias gpu='lspci -vnn | grep VGA -A 12'
alias clear='tput reset'
alias ct='clear&&y check-types'
alias incognito='unset HISTFILE'
alias caps='setxkbmap -option compose:caps'
function logdiff {
  if ((2==$#)); then
    a=$1
    b=$2
    alog=$(echo $a | tr '/' '-').log
    blog=$(echo $b | tr '/' '-').log
    git log --oneline $a > $alog
    git log --oneline $b > $blog
    diff $alog $blog
  fi
}

function ygg {
  cd ~/inv/repos/yggdrasil
  tmux rename-window 'ygg'

  tmux new-window
  tmux rename-window 'mimir'
  tmux send-keys 'cd services/mimir && yarn dev' 'C-m'
  tmux split-window
  tmux send-keys 'cd services/mimir && tsc-watch --noEmit -p .' 'C-m'

  tmux new-window
  tmux rename-window 'midgard'
  tmux send-keys 'cd services/midgard && yarn dev' 'C-m'

  tmux new-window
  tmux rename-window 'heimdall'
  tmux send-keys 'cd services/heimdall && yarn dev' 'C-m'
}

eval "$(direnv hook zsh)"

# https://github.com/yarnpkg/yarn/issues/6130
export NPM_TOKEN=''

alias duu='du -h -d 2 . | sort -h'
alias duuu='du -h -d 1 . | sort -h'
alias df='df -h 2>/dev/null'
alias tree='tree -I node_modules'
alias groot='git rebase -i --root'
alias ytdl='youtube-dl -x --audio-format mp3 --force-ipv4 -i'
alias beep='aplay ~/dotfiles/sounds/beep-07.wav'
alias th='aiksaurus'
alias uz='unzip'

export GPG_TTY=$(tty)

alias hp='heroku accounts:set personal'
alias hi='heroku accounts:set inv'
export PG='postgres://postgres@localhost/postgres'

+(){
  dc -e "$* p"
}

alias dc='docker-compose'
function ncc() {
  while :; do; nc -lvvp ${1:-9090}; done;
}

alias 1='cd - >/dev/null'
alias 2='cd -2 >/dev/null'
alias 3='cd -3 >/dev/null'
alias k='emacs ~/k/index.org'
upload() { if [ $# -eq 0 ]; then echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi
tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; rm -f $tmpfile; }
alias bandwidth='sudo nethogs'
alias rm='rm -i'
alias sub='rm -rf /home/gcg/.ezsub && ezsub download -l en --destination sub -G -O -A  --title'

# 96, 120 (25% higher), 144 (50% higher), 168 (75% higher), 192 (100% higher) etc.
# xrandr --dpi 120
alias big='xrandr --output eDP1 --mode 1600x900'
alias small='xrandr --output eDP1 --mode 1920x1080'
alias red='systemctl --user restart redshift'
pdfremovelastpage() {
  pdftk "$1" cat 1-r2 output "$2"
}
alias stream="obs"
function favicon() {
  if [ $# -eq 0 ]
  then
    echo "Usage: favicon <input>"
    return
  fi
  convert -resize x16 -gravity center -crop 16x16+0+0 -flatten -colors 256 $1 output-16x16.ico
  convert -resize x32 -gravity center -crop 32x32+0+0 -flatten -colors 256 $1 output-32x32.ico
  convert output-16x16.ico output-32x32.ico favicon.ico
  convert -resize x152 $1 apple-touch-icon-152x152.png
  convert -resize x120 $1 apple-touch-icon-120x120.png
  convert -resize x76  $1 apple-touch-icon-76x76.png
  convert -resize x60  $1 apple-touch-icon-60x60.png
  xclip -selection clipboard <<EOF
<link rel="shortcut icon" href="/favicon.ico" sizes="32x32"/>
<link rel="apple-touch-icon" sizes="152x152" href="/apple-touch-icon-152x152.png"/>
<link rel="apple-touch-icon" sizes="120x120" href="/apple-touch-icon-120x120.png"/>
<link rel="apple-touch-icon" sizes="76x76" href="/apple-touch-icon-76x76.png"/>
<link rel="apple-touch-icon" href="/apple-touch-icon-60x60.png"/>
EOF
  echo "HTML copied to the clipboard!"
}
alias lastc='g lg | head -n 1 | cut -d" " -f2 | c'
function splitVideo() {
  if [ $# -eq 0 ]
  then
    echo "Usage: splitVideo input.mp4 00:01:00 00:02:00 output.mp4"
    return
  fi
  # 
  ffmpeg -i $1 -acodec copy -vcodec copy -ss $2 -t $3 $4
}
function shrink-video() {
  if [ $# -eq 0 ]
  then
    echo "Usage: shrink-video input.mp4"
    return
  fi
  ffmpeg -i "$1" -sws_flags lanczos+accurate_rnd -vf "scale=320:240" -c:v libx264 -crf 20 -preset fast -profile:v main -tune fastdecode -c:a copy "small - $1"
}
function shrink-video-all() {
  for f in *; do
    ffmpeg -i "$f" -sws_flags lanczos+accurate_rnd -vf "scale=320:240" -c:v libx264 -crf 20 -preset fast -profile:v main -tune fastdecode -c:a copy "small - $f"
  done
}
function audio-to-video() {
  if [ $# -eq 0 ]
  then
    echo "Usage: audio-to-video audio.mp3 image.jpg"
    return
  fi
  ffmpeg -loop 1 -i "$2" -i "$1" -c:v libx264 -tune stillimage -shortest "$1.mp4"
}
function audio-to-video-all() {
  if [ $# -eq 0 ]
  then
    echo "Usage: audio-to-video image.jpg"
    return
  fi
  for f in *; do
  ffmpeg -loop 1 -i "$1" -i "$f" -c:v libx264 -tune stillimage -shortest "$f.mp4"
  done
}
alias mp3='lame -V 9 -h'
function watermark() {
  if [ $# -eq 0 ]
  then
    echo "Usage: watermark input.mp4 watermark.png output.mp4"
    return
  fi
  # ffmpeg -i $1 -i $2 -filter_complex "overlay=W-w-5:H-h-5" $3
  ffmpeg -y \
-i $1 \
-i $2 \
-filter_complex "\
[1][0]scale2ref=h=ow/mdar:w=iw/4[#A logo][bird];\
[#A logo]format=argb,colorchannelmixer=aa=0.5[#B logo transparent];\
[bird][#B logo transparent]overlay\
=(main_w-w)-(main_w*0.1):(main_h-h)-(main_h*0.1)" \
$3

#A preserve aspect ratio of logo, scale width of logo to 1/4 of image width
#B add alpha channel, reduce opacity to 50%
# overlay image an logo
# position: bottom right, with a margin of 10% of the edges
}
function cutvideo() {
  if [ $# -eq 0 ]
  then
    echo "Usage: cutvideo start-time duration input.mp4 output.mp4"
    return
  fi
  ffmpeg -ss $1 -t $2 -i $3 -async 1 $4
}
function mergevideo() {
  if [ $# -eq 0 ]
  then
    echo "Usage: mergevideo my-file-input.txt"
    echo "Where list.txt must follow the pattern:"
    echo "file '1.mp4'"
    echo "file '2.mp4'"
    return
  fi
  ffmpeg -f concat -safe 0 -i $1 -c copy output.mp4               
}
alias gnoop='git commit  --gpg-sign --allow-empty -m "chore: empty commit (probably trying to trigger CI)"'
alias whoowns='pacman -Qo'
alias pacman-clean-cache='sudo journalctl --vacuum-files=1 && sudo paccache -r && sudo yay -Sc && sudo pacman -Sc && sudo pacman -Scc'
alias pacman-remove-orphans='pacman -Qtdq | sudo pacman -Rns -'
alias pacman-list-files='pacman -Ql'
alias nrepl="clojure -Sdeps '{:deps {nrepl {:mvn/version \"0.7.0\"} cider/cider-nrepl {:mvn/version \"0.25.2\"}}}' -m nrepl.cmdline --middleware '[\"cider.nrepl/cider-middleware\"]'"

export NNN_PLUG='z:fzz;o:fzopen'
function up() {
  curl -F "file=@$1" "https://tmp.ninja/api.php?d=upload-tool"
}

alias now='vc'
alias ssr='simplescreenrecorder'
alias ports='sudo netstat -tunlp | less'
alias pu='pulumi up -r'
alias pl='pulumi logs -f'

function convert-all-to-azw3() {
  # TODO: For extra clean code, refactor to use case instead https://stackoverflow.com/a/18280350/1456173
  for f in ./*; do
    if [[ $f =~ \.azw3$ ]]; then
      echo "$f is already azw3, ignoring"
    else
      echo "$f is not azw3, converting"
      ebook-convert "$f" .azw3
    fi
  done
}

function cloud() {
  source ~/cloud/.envrc
  if [ -z "$AWS_S3_CLOUD_BACKUP_BUCKET" ]; then
    echo "Set AWS_S3_CLOUD_BACKUP_BUCKET"
    exit 1
  fi
  if [ $# -eq 0 ]
  then
    echo "Usage: cloud file"
    return
  fi
  echo "Encrypting and uploading file '${1}'"
  gpg --encrypt -r gunar@gunargessner.com <"${1}" \
    | aws s3 cp - "s3://${AWS_S3_CLOUD_BACKUP_BUCKET}/${1}" --storage-class STANDARD_IA  \
    || exit 1
  echo "Done! You can safely remove '${1}'"
}
function cloud-and-delete() {
  source ~/cloud/.envrc
  cloud "$1" && rm -f "$1" && echo "Removed $1 successfully."
}
function cloud-ls() {
  source ~/cloud/.envrc
  aws s3 ls --human-readable --summarize s3://${AWS_S3_CLOUD_BACKUP_BUCKET}/
}
function cloud-dl() {
  if [ $# -eq 0 ]
  then
    echo "Usage: cloud-dl <filename>"
    exit 0
  fi
  aws s3 cp "s3://${AWS_S3_CLOUD_BACKUP_BUCKET}/$1" - | gpg --decrypt >"$1" || exit 1
}
alias count-by-file-type="find . -type f | sed -n 's/..*\.//p' | sort | uniq -c"
function skynet-debug() {
  curl -X POST "https://siasky.net/skynet/skyfile" -F "file=@$1"
}
function skynet() {
  curl -X POST "https://siasky.net/skynet/skyfile" -F "file=@$1" | jq ".skylink" | xargs -I _ echo "https://siasky.net/_"
}
function skynet-and-delete() {
  curl -X POST "https://siasky.net/skynet/skyfile" -F "file=@$1" | jq ".skylink" | xargs -I _ echo "https://siasky.net/_" && rm "$1"
}
alias video-editor="flowblade"
# or openshot

parent-pid () { ps -p ${1:-$$} -o ppid=; }

# create packge.json pointint to file $1
pkg() {
  echo "{ \"main\" : \"$1\" }">>package.json
}
alias ink="inkscape"

# alias ng='killall ngrok 2>/dev/null;ngrok http -subdomain=gunar 3000 >/dev/null &!'
# alias ng='lt --subdomain gunar --port'
function ng() {
  # Creates a tunnel
  # dev.gunar.uk
  # dev.besloor.com
  if [ $# -eq 0 ]
  then
    echo "Usage: ng <port number>"
    return
  fi
  echo "Creating tunnels:"
  echo "  https://dev.besloor.com"
  echo "  https://dev.gunar.uk"
  ssh -N -R "4242:localhost:${1}" root@dev.gunar.uk
}
function para() {
  destination_port=$1
  parasite_port=7566
  ssh -N -R "localhost:4242:localhost:${parasite_port}" root@dev.gunar.uk &
  parasite "$parasite_port" "$destination_port" -l 0.0.0.0 -f 127.0.0.1
}

alias london='sudo timedatectl set-timezone Europe/London'
alias brazil='sudo timedatectl set-timezone America/Sao_Paulo'

alias rec-stop="killall simplescreenrecorder -s SIGSTOP"
alias rec-start="killall simplescreenrecorder -s SIGCONT"
alias dig='dog'
alias suspend="systemctl suspend"
alias limit-bandwidth="trickle"
alias backup-all-gists="gh gist list | cut -f1 | tr '\n' '\0' | xargs -0 -n1 gh gist clone"
function goog() {
  tuxi "$*"
}
alias psql="pgcli"
